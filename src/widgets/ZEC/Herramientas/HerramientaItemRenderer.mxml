<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:HeaderController="widgets.HeaderController.*"
                autoDrawBackground="false"
                buttonMode="true"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                focusEnabled="true"
                implements="mx.managers.IFocusManagerComponent"
                useHandCursor="true">

    <fx:Declarations>
        <s:Move3D id="moveEffect"
                  duration="200"
                  effectEnd="moveEffect_effectEndHandler(event)"
                  repeatBehavior="reverse"
                  repeatCount="2"
                  target="{icon}"
                  yBy="-8"
                  yFrom="0"/>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			
            private const WIDGET_ITEM_CLICK:String = "herramientaItemClick";
            private const WIDGET_ITEM_MOUSE_OVER:String = "herramientaItemMouseOver";
            private const WIDGET_ITEM_MOUSE_OUT:String = "herramientaItemMouseOut";

            [Bindable]
            private var widgetItem:Object;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                widgetItem = data;

                icon.source = widgetItem.icon;
                underline.widgetOpen = widgetItem.open;
            }

            private function mouseOutHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OUT, true)); // bubbles
            }

            private function mouseOverHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OVER, true)); // bubbles
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                if (!data.open)
                {
                    moveEffect.end();
                    moveEffect.play();
                }
            }

            private function moveEffect_effectEndHandler(event:EffectEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_CLICK, true)); // bubbles
            }

            //--------------------------------------------------------------------------
            //
            //  Focus Management
            //
            //--------------------------------------------------------------------------

            override public function drawFocus(isFocused:Boolean):void
            {
                super.drawFocus(isFocused);

                // Popup the tooltip or remove the menu
                if (isFocused)
                {
                    mouseOverHandler(null);
                }
                else
                {
                    mouseOutHandler(null);
                }
            }

            private var keyboardPressed:Boolean = false;

            override protected function keyDownHandler(event:KeyboardEvent):void
            {
                if (event.keyCode != Keyboard.SPACE)
                {
                    return;
                }

                keyboardPressed = true;
                event.updateAfterEvent();
            }

            override protected function keyUpHandler(event:KeyboardEvent):void
            {
                if (event.keyCode != Keyboard.SPACE)
                {
                    return;
                }

                if (enabled && keyboardPressed)
                {
                    // Mimic mouse click on the button.
                    keyboardPressed = false;
                    dispatchEvent(new MouseEvent(MouseEvent.CLICK));
                }
                event.updateAfterEvent();
            }
        ]]>
    </fx:Script>

    <s:VGroup width="35" height="40"
              gap="2"
              horizontalAlign="center"
              verticalAlign="middle" toolTip="{data.label}">
        <s:Image id="icon"
                 width="35" height="35"
                 buttonMode="true"
                 mouseOut="mouseOutHandler(event)"
                 mouseOver="mouseOverHandler(event)"
                 smooth="true"
                 useHandCursor="true"/>
        <HeaderController:WidgetUnderline id="underline"/>
    </s:VGroup>

</s:ItemRenderer>
