<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.google.analytics.debug._Style;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			/**
			 * Arreglo con informaciÃ³n
			 */
			[Bindable]private var provider:ArrayCollection = new ArrayCollection();
			private var campos:Array = new Array();
			
			[Bindable]public var descargar:Boolean = true;
			
			public function init(pr:ArrayCollection, campos:Array):void{
				this.campos = campos;
				var columnas:ArrayCollection=new ArrayCollection();
				var adcol:AdvancedDataGridColumn;
				for each(var fd:Object in campos){
					if(fd.hasOwnProperty("field")){
						adcol = new AdvancedDataGridColumn();
						adcol.dataField = fd.field;
						adcol.headerText = fd.field;
						if(fd.hasOwnProperty("nombre")){
							adcol.headerText = fd.nombre;
						}
						columnas.addItem(adcol);
					}
				}
				this.provider = new ArrayCollection();
				for each(var item:Object in pr){
					this.provider.addItem(item);
				}
				ADataGrid.columns = columnas.source;
			}
			
			public function generarExcel():void
			{
				var sheet:Sheet = new Sheet();
				var rowCount:int;
				var columnCount:int;

				rowCount = ADataGrid.dataProvider.length;
				columnCount = ADataGrid.columnCount;
				sheet.resize(rowCount + 1, columnCount); 
				var columns:Array = new Array();
				var k:int = 0;
				var h:int = 0;
				for each (var field:Object in this.campos){
					sheet.setCell(0,k,field.nombre);
					k++;
				}
				
				k=1;
				for each (var item:Object in this.provider){
					h=0;
					var max:Number=0;
					for each (var fld:Object in this.campos){
						var r:Object = this.findInArray(item, fld.field);
						if(getQualifiedClassName(r) == getQualifiedClassName(Array)){
							var i:Number = k;
							for each (var o:Object in r){
								sheet.setCell(i, h, o);
								i++;
							}
							if((r as Array).length > max){
								max = (r as Array).length;
							}
						}else{
							sheet.setCell(k, h, r);
							if(1 > max){
								max = 1;
							}
						}
						h++;
					}
					k+=max;
				}
			
				var xls:ExcelFile = new ExcelFile();
				xls.sheets.addItem(sheet);
				var bytes:ByteArray = xls.saveToByteArray();
				var fr:FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE,
					function():void
					{
						Alert.show("Archivo descargado","Finalizado");
					});
				fr.addEventListener(IOErrorEvent.IO_ERROR,
					function():void
					{
						Alert.show("Error al guardar el archivo","Finalizado");
					});
				fr.addEventListener(SecurityErrorEvent.SECURITY_ERROR,
					function():void
					{
						Alert.show("Error al guardar el archivo","Finalizado");
					});
				fr.save(bytes,"Reporte.xls");
			}
			
			private function findInArray(obj:Object, field:String):Array{
				var r:Array = [];
				if(obj.hasOwnProperty(field)){
					return [obj[field]];
				}else{
					if(obj.hasOwnProperty("children")){
						for each (var fld:Object in obj.children){
							var l:Array = findInArray(fld, field);
							for each(var it:Object in l){
								r.push(it);
							}
						}
					}
				}
				return r;
			}
			
			protected function descargarHandler(event:MouseEvent):void
			{
				this.generarExcel();				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout>
		</s:VerticalLayout>
	</s:layout>
	<mx:AdvancedDataGrid id="ADataGrid" width="100%" height="95%" headerStyleName="HeaderStyle">
		<mx:dataProvider>
			<mx:HierarchicalData source="{provider}"/>
		</mx:dataProvider>
	</mx:AdvancedDataGrid>
	<s:Button id="bDescarga" label="Descargar" click="descargarHandler(event)" visible="{descargar}">		
	</s:Button>
</s:Group>
