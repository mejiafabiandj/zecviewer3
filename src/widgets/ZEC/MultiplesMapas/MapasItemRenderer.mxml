<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="true" xmlns:esri="http://www.esri.com/2008/ags"
				creationComplete="itemrenderer1_creationCompleteHandler(event)" dataChange="itemrenderer1_dataChangeHandler(event)"
				contentBackgroundColor="{applicationBackgroundColor}" contentBackgroundAlpha="1" xmlns:MultiplesMapas="widgets.DANE.MultiplesMapas.*">
	<fx:Metadata>
		[Event(name="extentChange", type="com.esri.viewer.AppEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.TimeExtent;
			import com.esri.ags.clusterers.ESRIClusterer;
			import com.esri.ags.events.ExtentEvent;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.PanEvent;
			import com.esri.ags.layers.ArcGISDynamicMapServiceLayer;
			import com.esri.ags.layers.ArcGISImageServiceLayer;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.esri.ags.layers.ArcIMSMapServiceLayer;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.KMLLayer;
			import com.esri.ags.layers.Layer;
			import com.esri.ags.layers.OpenStreetMapLayer;
			import com.esri.ags.layers.TiledMapServiceLayer;
			import com.esri.ags.layers.WMSLayer;
			import com.esri.ags.utils.JSON;
			import com.esri.ags.virtualearth.VETiledLayer;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ConfigData;
			import com.esri.viewer.ViewerContainer;
			
			import flash.utils.getDefinitionByName;
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.DateField;
			import mx.events.FlexEvent;
			import mx.rpc.Fault;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import spark.components.DataGroup;
			
			[Bindable] private var applicationBackgroundColor:uint = (ViewerContainer.getInstance().configData.styleColors[5] != null) ? ViewerContainer.getInstance().configData.styleColors[5] : 0xFFFFFF;
			
			private const MAP_MANAGER:String = "MapManager";
			
			
			private var m_configData:ConfigData = ViewerContainer.getInstance().configData;
			
			private var colaLayers:Array = [];
			
			[Bindable] public var timeExtent:ObjectProxy;

			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				if(map.layerIds.length == 0)
					copiar_layers(data.contenedor.map);
				
			}


			protected function itemrenderer1_dataChangeHandler(event:FlexEvent):void
			{
				if(map.layerIds.length == 0)
					copiar_layers(data.contenedor.map);
			}
			
			private function copiar_layers(map:Map):void
			{
				
				for each (var layer:Object in map.layers)
				{
					if(map)
					{
						var copia:Object = copy(layer);
						addLayerToMap(copia,layer.className);
					}else
					{
						colaLayers.push({layer:copy(layer),tipo:layer.className});
					}
				}
				
			}
			
			public static function copy(value:Object):Object
			{
				var buffer:ByteArray = new ByteArray();
				buffer.writeObject(value);
				buffer.position = 0;
				var result:Object = buffer.readObject();
				return result;
			}
			
			private function addLayerToMap(layerObject:Object,tipo:String):void
			{
				const alpha:Number = Number(layerObject.alpha);
				const autoRefresh:Number = Number(layerObject.autoRefresh);
				const bandIds:String = layerObject.bandIds;
				const bingMapKey:String = layerObject.key;
				const clusterer:ESRIClusterer = layerObject.clusterer;
				const culture:String = layerObject.culture;
				const definitionExpression:String = layerObject.definitionExpression;
				const displayLevels:String = layerObject.displayLevels;
				const imageFormat:String = layerObject.imageFormat;
				const label:String = layerObject.label || layerObject.name;
				const maxAllowableOffset:Number = layerObject.maxAllowableOffset;
				const mode:String = layerObject.mode;
				const noData:Number = Number(layerObject.noData);
				const password:String = layerObject.password;
				const proxyUrl:String = m_configData.proxyUrl;
				const serviceHost:String = layerObject.serviceHost;
				const serviceName:String = layerObject.serviceName;
				const serviceURL:String = layerObject.serviceURL;
				const skipGetCapabilities:String = layerObject.skipGetCapabilities;
				const style:String = layerObject.style;
				const token:String = layerObject.token;
				const type:String = layerObject.type;
				const url:String = layerObject.url;
				const useAMF:String = layerObject.useAMF;
				const useMapTime:Boolean = layerObject.useMapTime;
				const useProxy:Boolean = layerObject.useProxy;
				const username:String = layerObject.username;
				const version:String = layerObject.version;
				const visible:Boolean = layerObject.visible;
				const visibleLayers:String = layerObject.visibleLayers;
				const wkid:Number = layerObject.wkid;
				
				var i:int;
				switch (tipo)
				{
					case "ArcGISTiledMapServiceLayer":
					{
						var tiledLayer:ArcGISTiledMapServiceLayer = new ArcGISTiledMapServiceLayer(url);
						tiledLayer.alpha = alpha;
						tiledLayer.id = label;
						tiledLayer.name = label;
						tiledLayer.token = token;
						tiledLayer.visible = visible;
						if (displayLevels)
						{
							tiledLayer.displayLevels = displayLevels.split(",");
							for (i = 0; i < tiledLayer.displayLevels.length; i++)
							{
								tiledLayer.displayLevels[i] = Number(tiledLayer.displayLevels[i]);
							}
						}
						if (proxyUrl && useProxy)
						{
							tiledLayer.proxyURL = proxyUrl;
						}
						layerObject.layer = tiledLayer;
						tiledLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						tiledLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(tiledLayer);
						break;
					}
					case "ArcGISDynamicMapServiceLayer":
					{
						var dynLayer:ArcGISDynamicMapServiceLayer = new ArcGISDynamicMapServiceLayer(url);
						dynLayer.alpha = alpha;
						dynLayer.id = label;
						dynLayer.name = label;
						dynLayer.token = token;
						dynLayer.visible = visible;
						dynLayer.useMapTime = useMapTime;
						if (autoRefresh > 0)
						{
							setInterval(dynLayer.refresh, autoRefresh * 1000);
						}
						if (imageFormat)
						{
							dynLayer.imageFormat = imageFormat;
						}
						if (visibleLayers)
						{
							var vizLayers:Array = visibleLayers.split(",");
							for (i = 0; i < vizLayers.length; i++)
							{
								vizLayers[i] = Number(vizLayers[i]);
							}
							dynLayer.visibleLayers = new ArrayCollection(vizLayers);
						}
						if (proxyUrl && useProxy)
						{
							dynLayer.proxyURL = proxyUrl;
						}
						layerObject.layer = dynLayer;
						dynLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						dynLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(dynLayer);
						break;
					}
					case "FeatureLayer":
					{
						var featureLayer:FeatureLayer = new FeatureLayer(url);
						featureLayer.addEventListener(FlexEvent.HIDE, featureLayer_hideHandler);
						featureLayer.alpha = alpha;
						featureLayer.id = label;
						featureLayer.name = label;
						featureLayer.maxAllowableOffset = maxAllowableOffset;
						featureLayer.outFields = [ '*' ]; // TODO: mejorar
						featureLayer.token = token;
						featureLayer.visible = visible;
						featureLayer.useMapTime = useMapTime;
						featureLayer.clusterer = clusterer;
						if (useAMF)
						{
							featureLayer.useAMF = (useAMF == "true");
						}
						if (mode)
						{
							featureLayer.mode = mode;
						}
						if (definitionExpression)
						{
							featureLayer.definitionExpression = definitionExpression;
						}
						if (proxyUrl && useProxy)
						{
							featureLayer.proxyURL = proxyUrl;
						}
						
						layerObject.layer = featureLayer;
						featureLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						featureLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(featureLayer);
						break;
					}
					case "VETiledLayer":
					{
						var veTiledLayer:VETiledLayer = new VETiledLayer();
						veTiledLayer.id = label;
						veTiledLayer.name = label;
						veTiledLayer.key = bingMapKey;
						veTiledLayer.visible = visible;
						veTiledLayer.alpha = alpha;
						if (style)
						{
							veTiledLayer.mapStyle = style;
						}
						if (culture)
						{
							veTiledLayer.culture = culture;
						}
						if (displayLevels)
						{
							veTiledLayer.displayLevels = displayLevels.split(",");
							for (i = 0; i < veTiledLayer.displayLevels.length; i++)
							{
								veTiledLayer.displayLevels[i] = Number(veTiledLayer.displayLevels[i]); // convert to Numbers
							}
						}
						layerObject.layer = veTiledLayer;
						veTiledLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						veTiledLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(veTiledLayer);
						break;
					}
					case "ArcGISImageServiceLayer":
					{
						var imgLayer:ArcGISImageServiceLayer = new ArcGISImageServiceLayer(url);
						imgLayer.id = label;
						imgLayer.name = label;
						imgLayer.alpha = alpha;
						imgLayer.token = token;
						imgLayer.visible = visible;
						imgLayer.noData = noData;
						imgLayer.useMapTime = useMapTime;
						if (imageFormat)
						{
							imgLayer.imageFormat = imageFormat;
						}
						if (bandIds)
						{
							imgLayer.bandIds = bandIds.split(",");
							for (i = 0; i < imgLayer.bandIds.length; i++)
							{
								imgLayer.bandIds[i] = Number(imgLayer.bandIds[i]); // convert to Numbers
							}
						}
						if (proxyUrl && useProxy)
						{
							imgLayer.proxyURL = proxyUrl;
						}
						layerObject.layer = imgLayer;
						imgLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						imgLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(imgLayer);
						break;
					}
					case "ArcIMSMapServiceLayer":
					{
						var arcimsLayer:ArcIMSMapServiceLayer = new ArcIMSMapServiceLayer();
						arcimsLayer.alpha = alpha;
						arcimsLayer.id = label;
						arcimsLayer.name = label;
						arcimsLayer.visible = visible;
						arcimsLayer.serviceHost = serviceHost;
						arcimsLayer.serviceName = serviceName;
						if (autoRefresh > 0)
						{
							setInterval(arcimsLayer.refresh, autoRefresh * 1000);
						}
						if (imageFormat)
						{
							arcimsLayer.imageFormat = imageFormat;
						}
						if (visibleLayers)
						{
							var visLayers:Array = visibleLayers.split(",");
							arcimsLayer.visibleLayers = new ArrayCollection(visLayers);
						}
						if (proxyUrl && useProxy)
						{
							arcimsLayer.proxyURL = proxyUrl;
						}
						if (username && password)
						{
							arcimsLayer.username = username;
							arcimsLayer.password = password;
						}
						layerObject.layer = arcimsLayer;
						arcimsLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						arcimsLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(arcimsLayer);
						break;
					}
					case "WMSLayer":
					{
						var wmsLayer:WMSLayer = new WMSLayer(url);
						wmsLayer.alpha = alpha;
						wmsLayer.id = label;
						wmsLayer.name = label;
						wmsLayer.visible = visible;
						if (wkid)
						{
							wmsLayer.spatialReference = new SpatialReference(wkid);
						}
						if (autoRefresh > 0)
						{
							setInterval(wmsLayer.refresh, autoRefresh * 1000);
						}
						if (imageFormat)
						{
							wmsLayer.imageFormat = imageFormat;
						}
						if (visibleLayers)
						{
							var wmsVisLayers:Array = visibleLayers.split(",");
							wmsLayer.visibleLayers = new ArrayList(wmsVisLayers);
						}
						if (proxyUrl && useProxy)
						{
							wmsLayer.proxyURL = proxyUrl;
						}
						if (skipGetCapabilities)
						{
							wmsLayer.skipGetCapabilities = skipGetCapabilities == "true";
						}
						if (username && password)
						{
							wmsLayer.username = username;
							wmsLayer.password = password;
						}
						if (version)
						{
							wmsLayer.version = version;
						}
						layerObject.layer = wmsLayer;
						wmsLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						wmsLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(wmsLayer);
						break;
					}
					case "OpenStreetMapLayer":
					{
						var osmLayer:OpenStreetMapLayer = new OpenStreetMapLayer();
						osmLayer.alpha = alpha;
						osmLayer.id = label;
						osmLayer.name = label;
						osmLayer.visible = visible;
						layerObject.layer = osmLayer;
						osmLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						osmLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(osmLayer);
						break;
					}
					case "KMLLayer":
					{
						var kmlLayer:KMLLayer = new KMLLayer(url);
						kmlLayer.addEventListener(FlexEvent.HIDE, kmlLayer_hideHandler);
						kmlLayer.alpha = alpha;
						kmlLayer.id = label;
						kmlLayer.name = label;
						if (serviceURL)
						{
							kmlLayer.serviceURL = serviceURL;
						}
						kmlLayer.visible = visible;
						layerObject.layer = kmlLayer;
						kmlLayer.addEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
						kmlLayer.addEventListener(LayerEvent.LOAD, layer_loadEvent);
						map.addLayer(kmlLayer);
						break;
					}
					default:
					{
						var errorMessage:String = StringUtil.substitute(getDefaultString('incorrectLayerTypeText'), "'" + type + "'");
						AppEvent.showError(errorMessage, MAP_MANAGER);
						break;
					}
				}
			}
			
			private function layer_loadErrorEvent(event:LayerEvent):void
			{
				event.layer.removeEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
				event.layer.removeEventListener(LayerEvent.LOAD, layer_loadEvent);
				
				var errorMessage:String = event.layer.name + " Error al cargar el layer: " + makeHTMLSafe(buildFaultMessage(event.fault));
				AppEvent.showError(errorMessage, MAP_MANAGER);
			}
			
			private function layer_loadEvent(event:LayerEvent):void
			{
				event.layer.removeEventListener(LayerEvent.LOAD_ERROR, layer_loadErrorEvent);
				event.layer.removeEventListener(LayerEvent.LOAD, layer_loadEvent);
			}
			
			private function makeHTMLSafe(content:String):String
			{
				content = content.replace(/>/g, "&gt;");
				content = content.replace(/</g, "&lt;");
				return content;
			}
			
			private function buildFaultMessage(fault:Fault):String
			{
				var faultMessage:String = StringUtil.substitute(getDefaultString('faultCode'), fault.faultCode) + "\n\n";
				faultMessage += StringUtil.substitute(getDefaultString('faultInfo'), fault.faultString) + "\n\n";
				faultMessage += StringUtil.substitute(getDefaultString('faultDetail'), fault.faultDetail);
				return faultMessage;
			}
			
			private function featureLayer_hideHandler(event:FlexEvent):void
			{
				const featureLayer:FeatureLayer = event.target as FeatureLayer;
				const graphic:Graphic = map.infoWindow.contentOwner as Graphic;
				if (map.infoWindow.visible && graphic && graphic.graphicsLayer === featureLayer)
				{
					map.infoWindow.hide();
				}
			}
			
			private function kmlLayer_hideHandler(event:FlexEvent):void
			{
				const kmlLayer:KMLLayer = event.target as KMLLayer;
				const graphic:Graphic = map.infoWindow.contentOwner as Graphic;
				if (map.infoWindow.visible && graphic)
				{
					for (var i:int = 0; i < kmlLayer.layers.length; )
					{
						if (graphic.graphicsLayer === kmlLayer.layers[i])
						{
							map.infoWindow.hide();
							break;
						}
						else
						{
							i++;
						}
					}
				}
			}
			
			private function getDefaultString(token:String):String
			{
				return resourceManager.getString("ViewerStrings", token);
			}


			protected function map_creationCompleteHandler(event:FlexEvent):void
			{
				if(colaLayers.length > 0)
				{
					for each (var layer:Object in colaLayers)
					{
						addLayerToMap(layer.layer,layer.tipo);
					}
				}
				
				timeExtent = data.contenedor.timeExtent
				
				map.addEventListener(AppEvent.BASEMAP_SWITCH,basemapSwitchHandler);
			}


			protected function map_extentChangeHandler(event:ExtentEvent):void
			{
				var dataGroup:DataGroup = data.contenedor.dataGroup;
				
				for (var i:Number = 0 ; i < dataGroup.getItemIndicesInView().length; i++)
				{
					var elemento:MapasItemRenderer = dataGroup.getElementAt(i) as MapasItemRenderer;
					if(elemento && elemento.map && elemento.map.scale && elemento.map.extent && elemento.map.extent.center &&
						(elemento.map.extent.center.x != event.extent.center.x || elemento.map.extent.center.y != event.extent.center.y || elemento.map.scale != map.scale)
					)
					{
						elemento.map.centerAt(event.extent.center);
						elemento.map.scale = map.scale;
					}
				}
			}
			

			protected function map_loadHandler(event:MapEvent):void
			{
				map.addEventListener(ExtentEvent.EXTENT_CHANGE,map_extentChangeHandler);
			}
			
			private function basemapSwitchHandler(event:AppEvent):void
			{
				const id:String = event.data as String;
				if (id)
				{
					const configBasemaps:Array = m_configData.basemaps;
					var selectedLabel:String;
					for (var i:uint = 0; i < configBasemaps.length; i++)
					{
						if (configBasemaps[i].id == id)
						{
							selectedLabel = configBasemaps[i].label;
							break;
						}
					}
					if (selectedLabel)
					{
						// turn on the selected basemap layers (more than one layer can have the same label)
						var layers:ArrayCollection = map.layers as ArrayCollection;
						for (i = 0; i < configBasemaps.length; i++)
						{
							var basemapLabel:String = configBasemaps[i].label;
							for each (var layer:Layer in layers)
							{
								if (layer.id == basemapLabel)
								{
									if (layer.id == selectedLabel)
									{
										layer.visible = true;
									}
									else
									{
										layer.visible = false;
									}
								}
							}
						}
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:BorderContainer width="100%" height="100%" backgroundColor="{applicationBackgroundColor}">
		<esri:Map id="map" creationComplete="map_creationCompleteHandler(event)"
				  load="map_loadHandler(event)"
				  logoVisible="false"
				  panEasingFactor="1"
				  width="100%" height="100%"
				  />
		<MultiplesMapas:HerramientasMapa horizontalCenter="0" top="5" map="{map}" timeExtent="{timeExtent}"/>
	</s:BorderContainer>
	
</s:ItemRenderer>
